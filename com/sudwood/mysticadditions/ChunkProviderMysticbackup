package net.minecraft.src;

import java.util.List;
import java.util.Random;

public class ChunkProviderMystic extends ChunkProviderGenerate
implements IChunkProvider
{

//This class inherits most of the terrain generation from ChunkProviderGenerate, since the terrain
//is basically just like the overworld's, except all desert. I have removed strongholds, villages,
//and mineshafts, however. Your terrain generator does not have to inherit ChunkProviderGenerate,
//but it must implement the IChunkProvider interface. I did not include modifications to the noise
//generator here; you'll have to tinker around with it yourself.

private Random rand;
private World worldObj;
private MapGenBase caveGenerator;
private MapGenBase ravineGenerator;
private BiomeGenBase biomesForGeneration[];

public ChunkProviderMystic(World world, long l)
{
super(world, l, true);
worldObj = world;
rand = new Random(l);
caveGenerator = new MapGenCaves();
ravineGenerator = new MapGenRavine();
}

//This is necessary to override the structure generator.
public Chunk provideChunk(int par1, int par2)
{
rand.setSeed((long)par1 * 0x4f9939f508L + (long)par2 * 0x1ef1565bd5L);
byte abyte0[] = new byte[32768];
generateTerrain(par1, par2, abyte0);
biomesForGeneration = worldObj.getWorldChunkManager().loadBlockGeneratorData(biomesForGeneration, par1 * 16, par2 * 16, 16, 16);
replaceBlocksForBiome(par1, par2, abyte0, biomesForGeneration);
caveGenerator.generate(this, worldObj, par1, par2, abyte0);
ravineGenerator.generate(this, worldObj, par1, par2, abyte0);
Chunk chunk = new Chunk(worldObj, abyte0, par1, par2);
chunk.generateSkylightMap();
return chunk;
}

//This is where world generation, the more superficial aspects of the terrain such as flowers
//and ores, occurs. It is analogous to BaseMod's GenerateSurface method. Since 1.8, world
//generation has been covered mostly by BiomeDecorator.java, which is called toward the end
//of this method.
public void populate(IChunkProvider ichunkprovider, int i, int j)
{
BlockSand.fallInstantly = true;
int k = i * 16;
int l = j * 16;
BiomeGenBase biomegenbase = worldObj.getWorldChunkManager().getBiomeGenAt(k + 16, l + 16);
rand.setSeed(worldObj.getSeed());
long l1 = (rand.nextLong() / 2L) * 2L + 1L;
long l2 = (rand.nextLong() / 2L) * 2L + 1L;
rand.setSeed((long)i * l1 + (long)j * l2 ^ worldObj.getSeed());
boolean flag = false;
if (!flag && rand.nextInt(4) == 0)
{
int i1 = k + rand.nextInt(16) + 8;
int j2 = rand.nextInt(128);
int k3 = l + rand.nextInt(16) + 8;
(new WorldGenLakes(Block.waterStill.blockID)).generate(worldObj, rand, i1, j2, k3);
}
if (!flag && rand.nextInt(8) == 0)
{
int j1 = k + rand.nextInt(16) + 8;
int k2 = rand.nextInt(rand.nextInt(128 - 8) + 8);
int l3 = l + rand.nextInt(16) + 8;
if (k2 < 63 || rand.nextInt(10) == 0)
{
(new WorldGenLakes(Block.lavaStill.blockID)).generate(worldObj, rand, j1, k2, l3);
}
}
for (int k1 = 0; k1 < 8; k1++)
{
int i3 = k + rand.nextInt(16) + 8;
int i4 = rand.nextInt(128);
int k4 = l + rand.nextInt(16) + 8;
if (!(new WorldGenDungeons()).generate(worldObj, rand, i3, i4, k4));
}

//Here is where BiomeDecorator takes over the world generation. You can create your own
//version of it, or simply place all of your world generation right here instead.
biomegenbase.decorate(worldObj, rand, k, l);
SpawnerAnimals.performWorldGenSpawning(worldObj, biomegenbase, k + 8, l + 8, 16, 16, rand);
k += 8;
l += 8;
BlockSand.fallInstantly = false;
}

//This has to do with strongholds, which I removed, so it just returns null.
public ChunkPosition func_40376_a(World world, String s, int i, int j, int k)
{
return null;
}

public void generateTerrain(int par1, int par2, byte[] par3ArrayOfByte)
    {
    
        byte var4 = 4;
        byte var5 = 16;
        byte var6 = 63;
        int var7 = var4 + 1;
        byte var8 = 17;
        int var9 = var4 + 1;
        this.biomesForGeneration = this.worldObj.getWorldChunkManager().getBiomesForGeneration(this.biomesForGeneration, par1 * 4 - 2, par2 * 4 - 2, var7 + 5, var9 + 5);
        this.noiseArray = this.initializeNoiseField(this.noiseArray, par1 * var4, 0, par2 * var4, var7, var8, var9);

        for (int var10 = 0; var10 < var4; ++var10)
        {
            for (int var11 = 0; var11 < var4; ++var11)
            {
                for (int var12 = 0; var12 < var5; ++var12)
                {
                    double var13 = 0.125D;
                    double var15 = this.noiseArray[((var10 + 0) * var9 + var11 + 0) * var8 + var12 + 0];
                    double var17 = this.noiseArray[((var10 + 0) * var9 + var11 + 1) * var8 + var12 + 0];
                    double var19 = this.noiseArray[((var10 + 1) * var9 + var11 + 0) * var8 + var12 + 0];
                    double var21 = this.noiseArray[((var10 + 1) * var9 + var11 + 1) * var8 + var12 + 0];
                    double var23 = (this.noiseArray[((var10 + 0) * var9 + var11 + 0) * var8 + var12 + 1] - var15) * var13;
                    double var25 = (this.noiseArray[((var10 + 0) * var9 + var11 + 1) * var8 + var12 + 1] - var17) * var13;
                    double var27 = (this.noiseArray[((var10 + 1) * var9 + var11 + 0) * var8 + var12 + 1] - var19) * var13;
                    double var29 = (this.noiseArray[((var10 + 1) * var9 + var11 + 1) * var8 + var12 + 1] - var21) * var13;

                    for (int var31 = 0; var31 < 8; ++var31)
                    {
                        double var32 = 0.25D;
                        double var34 = var15;
                        double var36 = var17;
                        double var38 = (var19 - var15) * var32;
                        double var40 = (var21 - var17) * var32;

                        for (int var42 = 0; var42 < 4; ++var42)
                        {
                            int var43 = var42 + var10 * 4 << 11 | 0 + var11 * 4 << 7 | var12 * 8 + var31;
                            short var44 = 128;
                            var43 -= var44;
                            double var45 = 0.25D;
                            double var49 = (var36 - var34) * var45;
                            double var47 = var34 - var49;

                            for (int var51 = 0; var51 < 4; ++var51)
                            {
                                if ((var47 += var49) > 0.0D)
                                {
                                    par3ArrayOfByte[var43 += var44] = (byte)mod_MysticAdditions.mysticgenStone.blockID;
                                }
                                else if (var12 * 8 + var31 < var6)
                                {
                                    par3ArrayOfByte[var43 += var44] = (byte)mod_MysticAdditions.mysticgenStone.blockID;
                                }
                                else
                                {
                                    par3ArrayOfByte[var43 += var44] = 0;
                                }
                            }

                            var34 += var38;
                            var36 += var40;
                        }

                        var15 += var23;
                        var17 += var25;
                        var19 += var27;
                        var21 += var29;
                    }
                }
            }
        }
    }

    /**
     * Replaces the stone that was placed in with blocks that match the biome
     */
    public void replaceBlocksForBiome(int par1, int par2, byte[] par3ArrayOfByte, BiomeGenBase[] par4ArrayOfBiomeGenBase)
    {
        byte var5 = 63;
        double var6 = 0.03125D;
        this.stoneNoise = this.noiseGen4.generateNoiseOctaves(this.stoneNoise, par1 * 16, par2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);

        for (int var8 = 0; var8 < 16; ++var8)
        {
            for (int var9 = 0; var9 < 16; ++var9)
            {
                BiomeGenBase var10 = par4ArrayOfBiomeGenBase[var9 + var8 * 16];
                float var11 = var10.getFloatTemperature();
                int var12 = (int)(this.stoneNoise[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
                int var13 = -1;
                byte var14 = var10.topBlock;
                byte var15 = var10.fillerBlock;

                for (int var16 = 127; var16 >= 0; --var16)
                {
                    int var17 = (var9 * 16 + var8) * 128 + var16;

                    if (var16 <= 0 + this.rand.nextInt(5))
                    {
                        par3ArrayOfByte[var17] = (byte)Block.bedrock.blockID;
                    }
                    else
                    {
                        byte var18 = par3ArrayOfByte[var17];

                        if (var18 == 0)
                        {
                            var13 = -1;
                        }
                        else if (var18 == mod_MysticAdditions.mysticgenStone.blockID)
                        {
                            if (var13 == -1)
                            {
                                if (var12 <= 0)
                                {
                                    var14 = 0;
                                    var15 = (byte)mod_MysticAdditions.mysticgenStone.blockID;
                                }
                                else if (var16 >= var5 - 4 && var16 <= var5 + 1)
                                {
                                    var14 = var10.topBlock;
                                    var15 = var10.fillerBlock;
                                }

                                if (var16 < var5 && var14 == 0)
                                {
                                    if (var11 < 0.15F)
                                    {
                                        var14 = (byte)Block.ice.blockID;
                                    }
                                    else
                                    {
                                        var14 = (byte)Block.waterStill.blockID;
                                    }
                                }

                                var13 = var12;

                                if (var16 >= var5 - 1)
                                {
                                    par3ArrayOfByte[var17] = var14;
                                }
                                else
                                {
                                    par3ArrayOfByte[var17] = var15;
                                }
                            }
                            else if (var13 > 0)
                            {
                                --var13;
                                par3ArrayOfByte[var17] = var15;

                                if (var13 == 0 && var15 == Block.sand.blockID)
                                {
                                    var13 = this.rand.nextInt(4);
                                    var15 = (byte)Block.sandStone.blockID;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}
